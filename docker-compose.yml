services:
  tailscale-client:
    image: tailscale/tailscale:latest
    container_name: tailscale
    hostname: tailscale-${MC_NAME} # This name will be the one on the tailscale network
    environment:
      TS_AUTHKEY:
      TS_STATE_DIR: "/var/lib/tailscale"
      TS_USERSPACE: "FALSE" # If not using Auto-pause it can be set as true
    volumes:
      - ./ts-minecraft/state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped
    # ports: # Not needed, tailscale is directly linking to the container.
      # - "25565:25565"
  minecraft-server:
    container_name: ${MC_NAME}
    image: itzg/minecraft-server
    deploy:
      resources:
        limits:
          memory: ${MEMORY_LIMITS}
    network_mode: container:tailscale
    stdin_open: true
    tty: true
    environment:
      SERVER_NAME: ${MC_NAME}
      MOTD: ${MC_MOTD}
      EULA: "TRUE"
      TYPE:
      MAX_PLAYERS:
      DIFFICULTY:
      MEMORY: ""
      JVM_XX_OPTS: "-XX:MaxRAMPercentage=75"
      RCON_PASSWORD:
      RCON_PORT:
      # ENABLE_AUTOPAUSE: "TRUE"
      # AUTOPAUSE_KNOCK_INTERFACE: "tailscale0"
      # MAXT_ICK_TIME: "-1"
    volumes:
      - ${MC_DATA_DIR}:/data
    restart: unless-stopped
      # "init" container for mc to restore the data volume when empty
  restore-backup:
    # Same image as mc, but any base image with bash and tar will work
    image: itzg/mc-backup
    user: "1000"
    restart: no
    entrypoint: restore-tar-backup
    volumes:
      # Must be same mount as mc service, needs to be writable
      - ${MC_DATA_DIR}:/data
      # Must be same mount as backups service, but can be read-only
      - ${MC_BACKUP_DIR}:/backups:ro
  backups:
    image: itzg/mc-backup
    depends_on:
      minecraft-server:
        condition: service_healthy
    user: "1000"
    environment:
      BACKUP_METHOD: rsync
      PRUNE_BACKUPS_COUNT: 50
      PRUNE_BACKUPS_DAYS: 10
      BACKUP_INTERVAL: "24h"
      RCON_HOST: tailscale-${MC_NAME}
      RCON_PASSWORD:
      RCON_PORT:
      # since this service waits for mc to be healthy, no initial delay is needed
      INITIAL_DELAY: 0
      # As an example, to backup only the world data:
      # INCLUDES: world,world_nether,world_the_end
    volumes:
      - ${MC_DATA_DIR}:/data:ro
      - ${MC_BACKUP_DIR}:/backups
     
